name: Build PHP

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "0 0 * * 0"  # Weekly on Sunday at 00:00 UTC
  workflow_dispatch:

env:
  SPC_VERSION: "2.7.4"

jobs:
  build:
    name: Build PHP ${{ matrix.version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        version: ["8.4"]
        os:
          - ubuntu-22.04
          - ubuntu-24.04
          - windows-latest
          - macos-13
          - macos-latest
        include:
          - os: ubuntu-22.04
            spc_os: linux
            spc_arch: x64
            spc_binary: spc-linux-x86_64.tar.gz
          - os: ubuntu-24.04  
            spc_os: linux
            spc_arch: x64
            spc_binary: spc-linux-x86_64.tar.gz
          - os: windows-latest
            spc_os: win
            spc_arch: x64
            spc_binary: spc-windows-x64.exe
          - os: macos-13
            spc_os: macos
            spc_arch: x64
            spc_binary: spc-macos-x86_64.tar.gz
          - os: macos-latest
            spc_os: macos
            spc_arch: arm64
            spc_binary: spc-macos-aarch64.tar.gz

    continue-on-error: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP for build system
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer
          extensions: curl, openssl, mbstring, zip

      - name: Create workspace directories
        run: |
          mkdir -p ../static-php-cli/bin
          mkdir -p ../php-bin

      - name: Download static-php-cli
        run: |
          cd ../static-php-cli
          SPC_URL="https://github.com/crazywhalecc/static-php-cli/releases/download/${{ env.SPC_VERSION }}/${{ matrix.spc_binary }}"
          echo "Downloading SPC from: $SPC_URL"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            curl -fsSL -o bin/spc.exe "$SPC_URL"
            chmod +x bin/spc.exe
          else
            curl -fsSL -o bin/spc.tar.gz "$SPC_URL"
            tar -xzf bin/spc.tar.gz -C bin/
            chmod +x bin/spc
          fi
          
          # Verify SPC is working
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./bin/spc.exe --version || echo "SPC version check failed"
          else
            ./bin/spc --version || echo "SPC version check failed"
          fi

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool pkg-config \
            make cmake gcc g++ \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libjpeg-dev libpng-dev libonig-dev libzip-dev

      - name: Install system dependencies (macOS)
        if: contains(matrix.os, 'macos')
        run: |
          brew update
          brew install automake libtool pkg-config cmake
          brew install openssl curl libxml2 libiconv

      - name: Read PHP extensions
        id: php-extensions
        run: |
          EXTENSIONS=$(cat php-extensions.txt | tr -d '\n\r' | sed 's/,,*/,/g')
          echo "extensions=$EXTENSIONS" >> $GITHUB_OUTPUT
          echo "PHP_EXTENSIONS=$EXTENSIONS" >> $GITHUB_ENV

      - name: Cache SPC downloads
        uses: actions/cache@v4
        with:
          path: ../static-php-cli/downloads
          key: spc-downloads-${{ matrix.version }}-${{ hashFiles('php-extensions.txt') }}-${{ matrix.spc_os }}-${{ matrix.spc_arch }}
          restore-keys: |
            spc-downloads-${{ matrix.version }}-

      - name: Download PHP and extension sources
        run: |
          cd ../static-php-cli
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./bin/spc.exe download --with-php=${{ matrix.version }} --for-extensions "${{ env.PHP_EXTENSIONS }}" --prefer-pre-built --retry 3
          else
            ./bin/spc download --with-php=${{ matrix.version }} --for-extensions "${{ env.PHP_EXTENSIONS }}" --prefer-pre-built --retry 3
          fi

      - name: Build PHP with micro SAPI
        run: |
          cd ../static-php-cli
          
          # Here: no --with-php, only extensions + build target
          BUILD_CMD="${{ env.PHP_EXTENSIONS }} --build-micro"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if [[ -f "assets/icon.ico" ]]; then
              cp ../../darkterminal-php-bin/assets/icon.ico .
              BUILD_CMD="$BUILD_CMD --with-micro-logo=icon.ico"
            fi
            ./bin/spc.exe doctor --auto-fix
            ./bin/spc.exe build $BUILD_CMD
          else
            ./bin/spc doctor --auto-fix
            ./bin/spc build $BUILD_CMD
          fi

      - name: Collect build artifacts
        run: |
          mkdir -p artifacts
          
          # Copy PHP binary
          if [[ -f "../static-php-cli/buildroot/bin/micro.sfx" ]]; then
            cp "../static-php-cli/buildroot/bin/micro.sfx" "artifacts/php-micro-${{ matrix.version }}-${{ matrix.spc_os }}-${{ matrix.spc_arch }}.sfx"
          fi
          
          # Copy license files
          if [[ -d "../static-php-cli/buildroot/license" ]]; then
            cp -r "../static-php-cli/buildroot/license" "artifacts/"
          fi
          
          # Copy build metadata
          if [[ -f "../static-php-cli/buildroot/build-extensions.json" ]]; then
            cp "../static-php-cli/buildroot/build-extensions.json" "artifacts/build-extensions-${{ matrix.spc_os }}.json"
          fi
          if [[ -f "../static-php-cli/buildroot/build-libraries.json" ]]; then
            cp "../static-php-cli/buildroot/build-libraries.json" "artifacts/build-libraries-${{ matrix.spc_os }}.json"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: php-${{ matrix.version }}-${{ matrix.spc_os }}-${{ matrix.spc_arch }}
          path: |
            artifacts/
          retention-days: 7

      - name: Create Pull Request with updates
        if: matrix.os == 'ubuntu-22.04' && matrix.version == '8.3'  # Only create PR from one job to avoid conflicts
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-php-binaries-${{ github.run_id }}
          title: "Update PHP Binaries - Build ${{ github.run_number }}"
          commit-message: "Update PHP binaries and build metadata"
          body: |
            Automated update of PHP binaries built with static-php-cli.
            
            **Build Details:**
            - Workflow Run: #${{ github.run_number }}
            - Trigger: ${{ github.event_name }}
            - PHP Versions: ${{ join(matrix.version) }}
            - Platforms: ${{ join(matrix.os) }}
            
            This PR includes updated PHP binaries and associated license files.
